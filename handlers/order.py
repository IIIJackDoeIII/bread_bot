from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Session, User, CartItem, Order
from utils.translations import get_translation
from utils.keyboards import generate_main_keyboard, generate_cart_keyboard
from config import ADMINS
import json
import logging
import re

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
class CheckoutForm(StatesGroup):
    waiting_for_data = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def generate_checkout_form_keyboard(name_filled, phone_filled, receipt_uploaded):
    buttons = [
        [types.InlineKeyboardButton(text="‚úÖ –ò–º—è" if name_filled else "–ò–º—è", callback_data="input_name")],
        [types.InlineKeyboardButton(text="‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω" if phone_filled else "–¢–µ–ª–µ—Ñ–æ–Ω", callback_data="input_phone")],
        [types.InlineKeyboardButton(text="‚úÖ –ß–µ–∫" if receipt_uploaded else "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —á–µ–∫", callback_data="upload_receipt")],
        [
            types.InlineKeyboardButton(
                text="–ì–æ—Ç–æ–≤–æ" if name_filled and phone_filled and receipt_uploaded else "–ì–æ—Ç–æ–≤–æ (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)",
                callback_data="submit_order" if name_filled and phone_filled and receipt_uploaded else "disabled",
            )
        ],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)


# 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
@router.message(lambda message: message.text in ["–ú–æ–π –∑–∞–∫–∞–∑", "My Order"])
async def view_cart(message: types.Message):
    telegram_id = message.from_user.id
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        if not user:
            await message.answer(get_translation("cart_empty", "–†—É—Å—Å–∫–∏–π"), reply_markup=generate_main_keyboard("–†—É—Å—Å–∫–∏–π"))
            return

        language = user.language
        cart_items = session.query(CartItem).filter_by(user_id=user.id).all()

        if not cart_items:
            await message.answer(get_translation("cart_empty", language), reply_markup=generate_main_keyboard(language))
        else:
            cart_details = "\n".join([f"{item.bread_type}: {item.quantity}" for item in cart_items])
            await message.answer(
                f"{get_translation('cart_summary', language)}\n{cart_details}",
                reply_markup=generate_cart_keyboard(language)
            )
    finally:
        session.close()

# 2. –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
@router.message(lambda message: message.text in ["–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "Clear Cart"])
async def clear_cart_command(message: types.Message):
    telegram_id = message.from_user.id
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        language = user.language if user else "–†—É—Å—Å–∫–∏–π"

        if user:
            session.query(CartItem).filter_by(user_id=user.id).delete()
            session.commit()
            await message.answer(get_translation("cart_cleared", language), reply_markup=generate_main_keyboard(language))
        else:
            await message.answer(get_translation("cart_empty", language))
    finally:
        session.close()

# 3. –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@router.callback_query(lambda callback_query: callback_query.data.startswith("add_to_cart:"))
async def add_to_cart_handler(callback_query: types.CallbackQuery):
    telegram_id = callback_query.from_user.id
    data_parts = callback_query.data.split(":")
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        if not user:
            user = User(telegram_id=telegram_id, language="–†—É—Å—Å–∫–∏–π")
            session.add(user)
            session.commit()

        bread_type = data_parts[1]
        cart_item = session.query(CartItem).filter_by(user_id=user.id, bread_type=bread_type).first()
        if cart_item:
            cart_item.quantity += 1
        else:
            session.add(CartItem(user_id=user.id, bread_type=bread_type, quantity=1))
        session.commit()

        await callback_query.answer(get_translation("added_to_cart", user.language), show_alert=True)
    finally:
        session.close()

# 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@router.message(lambda message: message.text in ["–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "Proceed to Checkout"])
async def proceed_to_checkout(message: types.Message, state: FSMContext):
    await state.set_state(CheckoutForm.waiting_for_data)
    await state.update_data(name=None, phone=None, receipt=None)
    keyboard = generate_checkout_form_keyboard(False, False, False)
    await message.answer("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "input_name")
async def input_name(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.update_data(current_field="name")

@router.callback_query(F.data == "input_phone")
async def input_phone(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79123456789):")
    await state.update_data(current_field="phone")

@router.callback_query(F.data == "upload_receipt")
async def upload_receipt(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã:")
    await state.update_data(current_field="receipt")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∏ —Ñ–∞–π–ª–∞
@router.message()
async def handle_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã"""
    data = await state.get_data()
    current_field = data.get("current_field")

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.content_type}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
    if current_field == "name":
        await state.update_data(name=message.text)
        await message.answer("–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    elif current_field == "phone":
        if not message.text.startswith("+") or not message.text[1:].isdigit():
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        await state.update_data(phone=message.text)
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—á–µ–∫–∞)
    elif current_field == "receipt" and message.photo:
        file_id = message.photo[-1].file_id  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info(f"–ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: file_id = {file_id}")
        await state.update_data(receipt=file_id)
        await message.answer("–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω!")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    user_data = await state.get_data()
    keyboard = generate_checkout_form_keyboard(
        user_data.get("name") is not None,
        user_data.get("phone") is not None,
        user_data.get("receipt") is not None,
    )
    await message.answer("–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞:", reply_markup=keyboard)
    


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ì–æ—Ç–æ–≤–æ"
@router.callback_query(F.data == "submit_order")
async def submit_order(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    telegram_id = callback.from_user.id
    session = Session()

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∑–∞–∫–∞–∑–µ
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        cart_items = session.query(CartItem).filter_by(user_id=user.id).all()

        if not cart_items:
            await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
            return

        order_details = [{"bread_type": item.bread_type, "quantity": item.quantity} for item in cart_items]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        new_order = Order(
            user_id=user.id,
            name=data['name'],
            phone=data['phone'],
            details=json.dumps(order_details),
            receipt=data.get("receipt"),
        )
        session.add(new_order)
        session.query(CartItem).filter_by(user_id=user.id).delete()
        session.commit()

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.info(f"RAW DATA: name={data['name']}, phone={data['phone']}, telegram_id={user.telegram_id}")
        logger.info(f"RAW ORDER DETAILS: {order_details}")
        logger.info(f"RAW RECEIPT: {data.get('receipt')}")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        order_summary = "\n".join([f" {escape_markdown_v2(item['bread_type'])}: {item['quantity']}" for item in order_details])
        telegram_link = f'<a href="tg://user?id={user.telegram_id}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>'

        log_message = (
            f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
            f"üë§ <b>–ò–º—è:</b> {data['name']}<br>"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}<br>"
            f"üÜî <b>Telegram:</b> {telegram_link}<br><br>"
            f"üõí <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b><br>{order_summary}"
        )

        logger.info(f"Generated Telegram Link: {telegram_link}")
        logger.info(f"Generated Log Message:\n{log_message}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_chat_id in ADMINS:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await callback.message.bot.send_message(
                chat_id=admin_chat_id,
                text=log_message,
                parse_mode="MarkdownV2"
            )

            # –ï—Å–ª–∏ —á–µ–∫ (—Å–∫—Ä–∏–Ω—à–æ—Ç) –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
            receipt_file_id = data.get("receipt")
            if receipt_file_id:
                await callback.message.bot.send_photo(
                    chat_id=admin_chat_id,
                    photo=receipt_file_id,
                    caption="üìé –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ"
                )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!", reply_markup=generate_main_keyboard(user.language))
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    finally:
        session.close()



def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Telegram MarkdownV2.
    :param text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å.
    :return: –¢–µ–∫—Å—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.
    """
    if not text:
        return ""
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ "!" –∏ –¥—Ä—É–≥–∏—Ö
    escape_chars = r"([_*\[\]()~`>#+\-=|{}.!\\<>])"
    return re.sub(escape_chars, r"\\\1", text)






@router.callback_query(F.data == "disabled")
async def disabled_button(callback: types.CallbackQuery):
    await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã.", show_alert=True)