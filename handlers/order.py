from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.models import Session, User
from utils.keyboards import (
    generate_checkout_form_keyboard,
    generate_back_only_keyboard
)
from utils.translations import get_translation

from config import ADMINS  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞from utils.translations import get_translation


from database.models import CartItem, Order
import logging

router = Router()
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
class CheckoutForm(StatesGroup):
    waiting_for_data = State()


# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞
async def send_dynamic_form(message: types.Message, state: FSMContext, language: str):
    data = await state.get_data()
    logging.info(f"Form data: {data}")
    logging.info(f"Language: {language}")
    current_field = data.get("current_field", None)
    name_filled = bool(data.get("name"))
    phone_filled = bool(data.get("phone"))
    receipt_uploaded = bool(data.get("receipt"))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
    await message.answer(
        get_translation("dynamic_form", language),
        reply_markup=generate_checkout_form_keyboard(
            name_filled=name_filled,
            phone_filled=phone_filled,
            receipt_uploaded=receipt_uploaded,
            language=language  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —è–∑—ã–∫
        )
    )

    # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
    if current_field == "name":
        await message.answer(get_translation("enter_name", language))
    elif current_field == "phone":
        await message.answer(get_translation("enter_phone", language))
    elif current_field == "receipt":
        await message.answer(get_translation("attach_receipt", language))
    elif not current_field:
        if not name_filled:
            await message.answer(get_translation("enter_name", language))
            await state.update_data(current_field="name")
        elif not phone_filled:
            await message.answer(get_translation("enter_phone", language))
            await state.update_data(current_field="phone")
        elif not receipt_uploaded:
            await message.answer(get_translation("attach_receipt", language))
            await state.update_data(current_field="receipt")


  


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@router.message(F.text.in_([
    get_translation("proceed_to_checkout", "–†—É—Å—Å–∫–∏–π"),
    get_translation("proceed_to_checkout", "English")
]))
async def proceed_to_checkout(message: types.Message, state: FSMContext):
    """
    –í–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ä–º—É.
    """
    telegram_id = message.from_user.id
    session = Session()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        user_language = user.language if user and user.language else "–†—É—Å—Å–∫–∏–π"

        # –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º start_dynamic_form –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ñ–æ—Ä–º–µ
        await start_dynamic_form(message, state)

    finally:
        session.close()





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å"
@router.message(F.text.in_([
    get_translation("begin_checkout", "–†—É—Å—Å–∫–∏–π"),
    get_translation("begin_checkout", "English")
]))
async def start_dynamic_form(message: types.Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –∏ –∑–∞–º–µ–Ω—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å —É—á—ë—Ç–æ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏.
    """
    telegram_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        user_language = user.language if user and user.language else "–†—É—Å—Å–∫–∏–π"
    finally:
        session.close()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    await state.set_state(CheckoutForm.waiting_for_data)
    await state.update_data(
        name=user.name if user and user.name else None,
        phone=user.phone if user and user.phone else None,
        receipt=None
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    await send_dynamic_form(message, state, user_language)

    # –ó–∞–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    await message.answer(
        get_translation("back_prompt", user_language),
        reply_markup=generate_back_only_keyboard(user_language)
    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(F.text.in_([
    get_translation("back_to_cart", "–†—É—Å—Å–∫–∏–π"),
    get_translation("back_to_cart", "English")
]))
async def back_to_cart(message: types.Message):
    from handlers.cart import view_cart
    telegram_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        user_language = user.language if user and user.language else "–†—É—Å—Å–∫–∏–π"
    finally:
        session.close()


    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    await view_cart(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@router.message(CheckoutForm.waiting_for_data)
async def handle_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_field = data.get("current_field")

    session = Session()
    telegram_id = message.from_user.id

    try:
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        user_language = user.language if user and user.language else "–†—É—Å—Å–∫–∏–π"

        if not user:
            user = User(telegram_id=telegram_id)
            session.add(user)

        if current_field == "name":
            if not message.text.isalpha() or len(message.text) < 2:
                await message.answer(get_translation("name_error", user_language))
                return
            user.name = message.text
            await state.update_data(name=message.text, current_field=None)
            await message.answer(get_translation("name_saved", user_language))

        elif current_field == "phone":
            if not message.text.startswith("+") or not message.text[1:].isdigit():
                await message.answer(get_translation("phone_error", user_language))
                return
            user.phone = message.text
            await state.update_data(phone=message.text, current_field=None)
            await message.answer(get_translation("phone_saved", user_language))

        elif current_field == "receipt" and message.photo:
            file_id = message.photo[-1].file_id
            user.receipt = file_id
            await state.update_data(receipt=file_id, current_field=None)
            await message.answer(get_translation("receipt_uploaded", user_language))

        session.commit()

    finally:
        session.close()

    await send_dynamic_form(message, state, user_language)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
@router.callback_query(F.data == "submit_order")
async def finalize_form(callback: types.CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    session = Session()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        data = await state.get_data()
        name = data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        phone = data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        receipt = data.get("receipt", None)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        user_language = user.language if user and user.language else "–†—É—Å—Å–∫–∏–π"

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart_items = session.query(CartItem).filter_by(user_id=user.id).all()
        if not cart_items:
            await callback.message.answer(get_translation("cart_empty", user_language))
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
        order_details = "\n".join(
            [f"üçû {item.bread_type}: {item.quantity} —à—Ç." for item in cart_items]
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —á–µ–∫
        order_summary = (
            f"{get_translation('order_summary_name', user_language)}{name}\n"
            f"{get_translation('order_summary_phone', user_language)}{phone}\n"
            f"{get_translation('order_summary_receipt', user_language)}"
            f"{get_translation('receipt_attached', user_language) if receipt else get_translation('receipt_not_attached', user_language)}\n\n"
            f"üì¶ {get_translation('order_details', user_language)}:\n{order_details}"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=get_translation("edit_order", user_language), callback_data="edit_order")],
            [types.InlineKeyboardButton(text=get_translation("confirm_order", user_language), callback_data="confirm_order")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —á–µ–∫
        await callback.message.answer(order_summary, parse_mode="Markdown", reply_markup=keyboard)

    finally:
        session.close()


@router.callback_query(F.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    session = Session()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_language = user.language if user and user.language else "–†—É—Å—Å–∫–∏–π"

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
        data = await state.get_data()
        name = data.get("name", user.name or get_translation("not_specified", user_language))
        phone = data.get("phone", user.phone or get_translation("not_specified", user_language))
        receipt_file_id = data.get("receipt")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart_items = session.query(CartItem).filter_by(user_id=user.id).all()
        if not cart_items:
            await callback.message.answer(get_translation("cart_empty", user_language))
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
        order_details = "\n".join(
            [f"üçû {item.bread_type}: {item.quantity} —à—Ç." for item in cart_items]
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        user_info = await callback.bot.get_chat(telegram_id)
        telegram_link = (
            f"[@{user_info.username}](https://t.me/{user_info.username})"
            if user_info.username
            else f"[–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å](tg://user?id={telegram_id})"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = (
            f"üÜï {get_translation('order_admin_notification', user_language)}\n"
            f"üë§ {get_translation('order_summary_name', user_language)}{name}\n"
            f"üìû {get_translation('order_summary_phone', user_language)}{phone}\n"
            f"üìé {get_translation('order_summary_receipt', user_language)}"
            f"{get_translation('receipt_attached', user_language) if receipt_file_id else get_translation('receipt_not_attached', user_language)}\n\n"
            f"üì¶ {get_translation('order_details', user_language)}:\n{order_details}\n"
            f"üí¨ Telegram: {telegram_link}"
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.message.answer(get_translation("order_confirmed", user_language))

        # –£–¥–∞–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        session.query(CartItem).filter_by(user_id=user.id).delete()
        session.commit()
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMINS:
            try:
                await callback.bot.send_message(admin_id, admin_message, parse_mode="Markdown")
                if receipt_file_id:
                    await callback.bot.send_photo(admin_id, photo=receipt_file_id, caption=get_translation("receipt_uploaded", user_language))
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    finally:
        session.close()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await callback.answer()




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
@router.callback_query(F.data == "edit_order")
async def edit_order(callback: types.CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id
    session = Session()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        user_language = user.language if user and user.language else "–†—É—Å—Å–∫–∏–π"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
        logging.info(f"1 –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ edit_order: {user_language}")
        await state.update_data(language=user_language, current_field=None)
        logging.info(f"2 –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ edit_order: {user_language}")


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await send_dynamic_form(callback.message, state, user_language)

    finally:
        session.close()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await callback.answer()







# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("input_"))
async def handle_field_edit(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]
    telegram_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    session = Session()
    try:
        user = session.query(User).filter_by(telegram_id=telegram_id).first()
        user_language = user.language if user and user.language else "–†—É—Å—Å–∫–∏–π"
    finally:
        session.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(current_field=field)
    await callback.answer()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    if field == "name":
        await callback.message.answer(get_translation("enter_name", user_language))
    elif field == "phone":
        await callback.message.answer(get_translation("enter_phone", user_language))
    elif field == "receipt":
        await callback.message.answer(get_translation("attach_receipt", user_language))

